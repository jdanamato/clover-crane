<script>
    document.addEventListener('alpine:init', () => {

    Alpine.data('handleMinicart', () => ({
        init() {
            console.log('handleMinicart init')
        },
        cart: {
            note: null,
            attributes: {},
            items: [],
            currency: window.Shopify.currency.active,
            cart_level_discount_applications: [],
            response: {
                result : {},
                show : false,
                timeout : 5000,
            },
            item_count: 0,
            total_price:0,
            total_weight: 0,
            total_discount: 0,
            original_total_price: 0,
            items_subtotal_price: 0
        },
        _abortController : null,
        initAbortController() {
            if(this._abortController) {
                this._abortController.abort('abort previous request');
            }
            this._abortController = new AbortController()
        },
        getAbortControllerSignal() {
            return this._abortController.signal
        },
        resetAbortController() {
            this._abortController = null;
        },
        toggleMiniCart() {
            console.log('(minicart.js) toggleMiniCart called');

            LiquifyHelper.handleTriggerClick();

            this.getCart();
        },

        /**
         * Get the cart data.
         */
        async getCart() {
            this.initAbortController()
            await fetch(window.Shopify.routes.root + 'cart.js', {
                method: 'GET',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
            })
                .then(response => response.json())
                .then(data => {
                    this.resetAbortController();

                    this.cart.item_count = data.item_count;

                    this.cart.items = data.items.map((item) => {
                        item.title = this.htmlspecialchars_decode(item.title)
                        return item
                    })


                    this.cart.total_price = data.total_price;
                    this.cart.total_weight = data.total_weight;
                    this.cart.total_discount = data.total_discount;

                    this.$dispatch('carttotalitems', data.item_count);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        },

        /**
         * @param key
         * @param quantity
         */
        increaseCartItemQuantity(key, quantity) {
            this.updateCartItemQuantity(key, parseInt(quantity) + 1);
        },

        /**
         * @param key
         * @param quantity
         */
        decreaseCartItemQuantity(key, quantity) {
            this.updateCartItemQuantity(key, parseInt(quantity) - 1);
        },

        /**
         * Update the cart item.
         *
         * @param key
         * @param quantity
         */
        updateCartItemQuantity(key, quantity) {
            this.initAbortController();
            console.log('updateCartItemQuantity(): key, quantity: ', key, quantity);
            this.cart.items.filter((product)  => {
                if(product.key === key) {
                    product.quantity = quantity
                }
            })
            let updates = {};
            updates[key] = quantity;
            fetch(window.Shopify.routes.root + 'cart/update.js', {
                method: 'POST',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ updates }),
            })
                .then(response => response.json())
                .then(data => {
                    this.resetAbortController();
                    console.log('updateCartItemQuantity(): ', data);

                    this.$dispatch('cartupdated');
                    this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    this.$dispatch('showcartmessage', { status: error?.status, message: error, description: error });
                });
        },

        /**
         * Format monetary values.
         */
        moneyFormat(value, minor = true) {
            return LiquifyHelper.moneyFormat(value, minor)
        },

        htmlspecialchars_decode(string) {
            return LiquifyHelper.htmlspecialchars_decode(string)
        },

        /**
         * Shows the minicart api message
         * @param event
         */
        showCartMessage(event) {
            //console.log("dispatched showCartMessage", event)
            if(event?.detail?.status) {
                this.cart.response.result = event.detail ?? {}
                this.cart.response.show = true
                setTimeout(() => {
                    this.cart.response.result = {};
                    this.cart.response.show = false
                }, this.cart.response.timeout ?? 5000)
            }
        },

        async returnCartItems() {
            await this.getCart();

            this.$dispatch('currentcartitems', this.cart.items);
        },

        /**
         * @deprecated
         */
        set open(open) { // deprecated use  LiquifyHelper instead
            //console.warn('Deprecated "set open" in mini_cart')
        },
        /**
         * @deprecated
         */
        get open() { // deprecated use  LiquifyHelper instead
            //console.warn('Deprecated "get open" in mini_cart')
            return false;
        },
        /**
         * @deprecated
         */
        set note(note) { // deprecated
            //console.warn('Deprecated "set note" in mini_cart')
            this.cart.note = note;
        },
        /**
         * @deprecated
         */
        get note() { // deprecated
            //console.warn('Deprecated "get note" in mini_cart')
            return this.cart.note;
        },
        /**
         * @deprecated
         */
        set attributes(attributes) { // deprecated
            //console.warn('Deprecated "set attributes" in mini_cart')
            this.cart.attributes = attributes;
        },
        /**
         * @deprecated
         */
        get attributes() { // deprecated
            //console.warn('Deprecated "get attributes" in mini_cart')
            return this.cart.attributes;
        },
        /**
         * @deprecated
         */
        set original_total_price(original_total_price) { //deprecated
            //console.warn('Deprecated "set original_total_price" in mini_cart')
            this.cart.original_total_price = original_total_price;
        },
        /**
         * @deprecated
         */
        get original_total_price() { //deprecated
            //console.warn('Deprecated "get original_total_price" in mini_cart')
            return this.cart.original_total_price;
        },
        /**
         * @deprecated
         */
        set total_price(total_price) { //deprecated
            //console.warn('Deprecated "set total_price" in mini_cart')
            this.cart.total_price = total_price;
        },
        /**
         * @deprecated
         */
        get total_price() { //deprecated
            //console.warn('Deprecated "get total_price" in mini_cart')
            return this.cart.total_price;
        },
        /**
         * @deprecated
         */
        set total_discount(total_discount) { //deprecated
            //console.warn('Deprecated "set total_discount" in mini_cart')
            this.cart.total_discount = total_discount;
        },
        /**
         * @deprecated
         */
        get total_discount() { //deprecated
            //console.warn('Deprecated "get total_discount" in mini_cart')
            return this.cart.total_discount;
        },
        /**
         * @deprecated
         */
        set total_weight(total_weight) { //deprecated
            //console.warn('Deprecated "set total_weight" in mini_cart')
            this.cart.total_discount = total_weight;
        },
        /**
         * @deprecated
         */
        get total_weight() { //deprecated
            //console.warn('Deprecated "get total_weight" in mini_cart')
            return this.cart.total_weight;
        },
        /**
         * @deprecated
         */
        set item_count(item_count) { //deprecated
            //console.warn('Deprecated "set item_count" in mini_cart')
            this.cart.total_discount = item_count;
        },
        /**
         * @deprecated
         */
        get item_count() { //deprecated
            //console.warn('Deprecated "get item_count" in mini_cart')
            return this.cart.item_count;
        },
        /**
         * @deprecated
         */
        set items_subtotal_price(items_subtotal_price) { //deprecated
            //console.warn('Deprecated "set items_subtotal_price" in mini_cart')
            this.cart.items_subtotal_price = items_subtotal_price;
        },
        /**
         * @deprecated
         */
        get items_subtotal_price() { //deprecated
            //console.warn('Deprecated "get items_subtotal_price" in mini_cart')
            return this.cart.items_subtotal_price;
        },
        /**
         * @deprecated
         */
        set products(products) {
            //console.warn('Deprecated "set products" in mini_cart')
            this.cart.items = products;
        },
        /**
         * @deprecated
         */
        get products() {
            //console.warn('Deprecated "get products" in mini_cart')
            return this.cart.items;
        },
        /**
         * @deprecated
         */
        set requires_shipping(requires_shipping) {
            //console.warn('Deprecated "set requires_shipping" in mini_cart')
        },
        /**
         * @deprecated
         */
        get requires_shipping() {
            //console.warn('Deprecated "get requires_shipping" in mini_cart')
            return false;
        },
        /**
         * @deprecated
         */
        set currency(currency) { //deprecated
            //console.warn('Deprecated "set currency" in mini_cart')
            this.cart.currency = currency;
        },
        /**
         * @deprecated
         */
        get currency() { //deprecated
            //console.warn('Deprecated "get currency" in mini_cart')
            return this.cart.currency;
        },
        /**
         * @deprecated
         */
        set cart_level_discount_applications(cart_level_discount_applications) { //deprecated
            //console.warn('Deprecated "set cart_level_discount_applications" in mini_cart')
            this.cart.cart_level_discount_applications = cart_level_discount_applications;
        },
        /**
         * @deprecated
         */
        get cart_level_discount_applications() { //deprecated
            //console.warn('Deprecated "get cart_level_discount_applications" in mini_cart')
            return this.cart.cart_level_discount_applications;
        },
        /**
         * @deprecated
         */
        set cartApiResponse(cartApiResponse) { //deprecated
            //console.warn('Deprecated "set cartApiResponse" in mini_cart')
            this.cart.cartApiResponse = cartApiResponse;
        },
        /**
         * @deprecated
         */
        get cartApiResponse() { //deprecated
            //console.warn('Deprecated "get cartApiResponse" in mini_cart')
            return this.cart.response;
        },
        /**
         * @deprecated
         */
        set total(total) { //deprecated
            //console.warn('Deprecated "set total" in mini_cart')
            this.cart.item_count = total.items;
            this.cart.total_price = total.price;
            this.cart.total_weight = total.weight;
            this.cart.total_discount = total.discount;
        },
        /**
         * @deprecated
         */
        get total() { //deprecated
            //console.warn('Deprecated "get total" in mini_cart')
            return {
                items: this.cart.item_count,
                price: this.cart.total_price,
                weight: this.cart.total_weight,
                discount: this.cart.total_discount,
            };
        }
    }))


});

</script>
<div data-delay="0" data-hover="false" li-element="mini-cart" class="nav_mini-cart-dd w-dropdown" x-data="handleMinicart()" x-init="getCart()" @cartupdated.window="getCart()" @setcartitem.window="updateCartItemQuantity($event.detail.product, $event.detail.quantity)" @increasecartitem.window="increaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @decreasecartitem.window="decreaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @toggleminicart.window="toggleMiniCart()" @showcartmessage.window="showCartMessage" @getcartitems.window="returnCartItems"><div li-element="mini-cart-toggle" class="main-nav_link cc-icon w-dropdown-toggle" @click="$dispatch('cartupdated.window')"><div class="icon-size-3 w-embed"><svg viewbox="0 0 18 18" width="100%" height="100%" preserveaspectratio="xMidYMid meet" aria-hidden="true" role="img"><g fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor"><path d="M6.75,4.75v-1.75c0-1.243,1.007-2.25,2.25-2.25h0c1.243,0,2.25,1.007,2.25,2.25v1.75"></path><path d="M5.334,4.75h7.333c1.037,0,1.903,.793,1.992,1.827l.652,7.5c.102,1.169-.82,2.173-1.992,2.173H4.681c-1.173,0-2.094-1.005-1.992-2.173l.652-7.5c.09-1.034,.955-1.827,1.992-1.827Z"></path></g></svg></div><div li-element="mini-cart-item-count" class="nav_cart-quantity" x-data="{ items: 0 }" x-text="items" @carttotalitems.window="items = event.detail">1</div></div><nav li-element="mini-cart-container" class="nav_mini-cart_modal w-dropdown-list" :class="open || 'mini-cart-closed'"><div li-object="dropdown-toggle" class="mini-cart_modal-bg">{{ dropdown-toggle }}</div><div class="mini-cart_panel"><div li-element="mini-cart-full" class="mini-cart--full" :style="total.items < 1 && { display: 'none' }"><div class="mini-cart_header"><div class="font-size-7">Cart</div><button li-element="dropdown-toggle" aria-label="Close Cart" class="main-nav_link cc-icon" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"><div class="icon-size-4 w-embed"><svg viewbox="0 0 18 18" width="100%" height="100%" preserveaspectratio="xMidYMid meet" aria-hidden="true" role="img"><g fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor"><line x1="14" y1="4" x2="4" y2="14"></line><line x1="4" y1="4" x2="14" y2="14"></line></g></svg></div></button></div><div class="mini-cart_body"><ul role="list" class="mini-cart_item-list w-list-unstyled"><template x-for="product in products" :key="product.key">
    <li li-element="mini-cart-item" class="mini-cart_item"><img loading="lazy" alt="" src="https://cdn.prod.website-files.com/67f4127d6585b87d59b354c8/67f412836585b87d59b36264_placholder-3.svg" class="mini-cart_thumbnail" x-bind:src="product.image">
<div class="mini-cart_item-info"><div li-js-object="product.title" class="font-size-4" x-text="product.title">Product Title</div><div class="mini-cart_item-price"><div li-js-price="product.price" class="font-weight-600 font-size-3" x-text="LiquifyHelper.moneyFormat(product.price, true, '{{ shop.money_with_currency_format }}')">$14.99</div><template x-if="product.price < product.original_price">
            <div li-js-if="product.price < product.original_price">
        <div li-js-price="product.original_price" class="text-style-strike text-gray-1" x-text="LiquifyHelper.moneyFormat(product.original_price, true, '{{ shop.money_with_currency_format }}')">$14.99</div>        </div>
    </template>
</div><div class="quantity-adjust_layout"><a li-element="mini-cart-item-decrease" href="#" class="quantity-adjust_button" :productprop="product" @click="$dispatch('decreasecartitem', { product: product.key, quantity: product.quantity, action: 'decrease' })">-</a><input li-element="mini-cart-item-quantity" class="quantity-adjust_button" value="1" :productprop="product" @input="$dispatch('setcartitem', { product: product.key, quantity: product.quantity })" x-model="product.quantity">
<a li-element="mini-cart-item-increase" href="#" class="quantity-adjust_button" :productprop="product" @click="$dispatch('increasecartitem', { product: product.key, quantity: product.quantity, action: 'increase' })">+</a></div><div li-element="mini-cart-item-remove" class="cart_item-remove" :productprop="product" @click="$dispatch('setcartitem', { product: product.key, quantity: 0 })">Remove</div></div></li></template>
</ul></div><div class="mini-cart_footer"><div class="mini-cart_footer-total"><div class="font-size-4">Subtotal</div><div class="mini-cart_footer-price"><template x-if="total.price < original_total_price">
            <div li-js-if="total.price < original_total_price" class="mini-cart_conditional">
        <div li-js-price="original_total_price" class="text-style-strike text-gray-1" x-text="LiquifyHelper.moneyFormat(original_total_price, true, '{{ shop.money_with_currency_format }}')">$14.99</div>        </div>
    </template>
<div li-js-price="total.price" class="font-weight-600 font-size-6" x-text="LiquifyHelper.moneyFormat(total.price, true, '{{ shop.money_with_currency_format }}')">$14.99</div></div></div><div li-element="mini-cart-api-response" class="mini-cart_footer-message hide"><div class="mini-cart_footer-message-item"><div>Message</div><div li-js-object="cartApiResponse?.result?.message" x-text="cartApiResponse?.result?.message">$14.99</div></div></div><div class="button-group"><a x-bind:href="'/checkout'" href="#" class="button w-button">Checkout</a><a li-object:href="routes.cart_url" href="{{ routes.cart_url }}" class="button cc-accent-soft w-button">Cart</a></div></div></div><div li-cloak="hide" li-element="mini-cart-empty" class="mini-cart--empty" :style="total.items && { display: 'none' }"><div class="mini-cart_header"><div class="font-size-7">Cart</div><button li-element="dropdown-toggle" aria-label="Close Cart" class="main-nav_link cc-icon" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"><div class="icon-size-4 w-embed"><svg viewbox="0 0 18 18" width="100%" height="100%" preserveaspectratio="xMidYMid meet" aria-hidden="true" role="img"><g fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor"><line x1="14" y1="4" x2="4" y2="14"></line><line x1="4" y1="4" x2="14" y2="14"></line></g></svg></div></button></div><div class="mini-cart_empty-content"><div>No Products selected</div></div></div></div></nav></div>
